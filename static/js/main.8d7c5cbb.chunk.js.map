{"version":3,"sources":["Ding.mp3","Ding2.mp3","Metronome.js","reportWebVitals.js","index.js"],"names":["Metronome","props","BpmChange","event","bpm","target","value","state","playing","clearInterval","timer","setInterval","startDing","setState","count","startStop","beatsPerMeasure","ding1","play","ding2","Audio","this","className","type","min","max","onChange","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAAe,G,MAAA,IAA0B,kCCA1B,MAA0B,kC,OC4F1BA,E,kDAnFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAeVC,UAAY,SAAAC,GAER,IAAMC,EAAMD,EAAME,OAAOC,MAErB,EAAKC,MAAMC,SACXC,cAAc,EAAKC,OACnB,EAAKA,MAAQC,YAAY,EAAKC,UAAY,GAAKR,EAAO,KACtD,EAAKS,SAAS,CAACC,MAAO,EAAGV,SAGzB,EAAKS,SAAS,CAACT,SA1BJ,EA+BnBW,UAAY,WAEJ,EAAKR,MAAMC,SACXC,cAAc,EAAKC,OACnB,EAAKG,SAAS,CAACL,SAAS,MAIxB,EAAKE,MAAQC,YAAY,EAAKC,UAAY,GAAK,EAAKL,MAAMH,IAAO,KACjE,EAAKS,SAAS,CAACC,MAAO,EAAGN,SAAS,GAAO,EAAKI,aAxCnC,EA6CnBA,UAAY,WACR,MAAiC,EAAKL,MAAtC,EAAOO,MAAP,EAAcE,kBAGkB,EAC5B,EAAKC,MAAMC,OAGX,EAAKC,MAAMD,OAIf,EAAKL,UAAS,SAAAN,GAAK,MAAK,CAACO,OAAQP,EAAMO,MAAQ,GAAKP,EAAMS,qBAtD1D,EAAKT,MAAQ,CACTC,SAAS,EACTM,MAAO,EACPV,IAAK,IACLY,gBAAiB,GAIrB,EAAKC,MAAQ,IAAIG,MAAMH,GACvB,EAAKE,MAAQ,IAAIC,MAAMD,GAZR,E,0CA6DnB,WACI,MAAuBE,KAAKd,MAArBC,EAAP,EAAOA,QAASJ,EAAhB,EAAgBA,IAEhB,OACI,sBAAKkB,UAAU,YAAf,UACI,sBAAKA,UAAU,aAAf,UACI,oCAAOlB,EAAP,WACA,uBACAmB,KAAO,QACPC,IAAM,KACNC,IAAM,MACNnB,MAASF,EACTsB,SAAYL,KAAKnB,eAErB,wBAAQyB,QAAWN,KAAKN,UAAxB,SACCP,EAAU,OAAS,iB,GA9EZoB,aCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8d7c5cbb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Ding.f90b3976.mp3\";","export default __webpack_public_path__ + \"static/media/Ding2.4d96deca.mp3\";","import React, {\r\n    Component\r\n} from 'react';\r\nimport './Metronome.css';\r\nimport ding1 from './Ding.mp3';\r\nimport ding2 from './Ding2.mp3';\r\n\r\nclass Metronome extends Component {\r\n    // Initializes the metronome.\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            playing: false,\r\n            count: 0,\r\n            bpm: 100,\r\n            beatsPerMeasure: 4\r\n        };\r\n\r\n        // Creating dings for the metronome.\r\n        this.ding1 = new Audio(ding1);\r\n        this.ding2 = new Audio(ding2);\r\n    }\r\n\r\n    // Used to make the slider work.\r\n    BpmChange = event => {\r\n        // Used => since a normal function wouldn't work when going to onChange (calling a reference)\r\n        const bpm = event.target.value;\r\n        \r\n        if (this.state.playing) {\r\n            clearInterval(this.timer);\r\n            this.timer = setInterval(this.startDing, (60 / bpm) * 1000);\r\n            this.setState({count: 0, bpm});\r\n        }\r\n        else {\r\n            this.setState({bpm});\r\n        }\r\n    }\r\n\r\n    // Used for starting the metronome and playing the dings at the appropriate times.\r\n    startStop = () => {\r\n        // If it is currently in use, then we can stop it.\r\n        if (this.state.playing) {\r\n            clearInterval(this.timer);\r\n            this.setState({playing: false});\r\n        }\r\n        // Not in use, then we start it with the BPM the slider is at.\r\n        else {\r\n            this.timer = setInterval(this.startDing, (60 / this.state.bpm) * 1000);\r\n            this.setState({count: 0, playing: true}, this.startDing);\r\n        }\r\n    }\r\n\r\n    // Helper to startStop which plays the correct ding.\r\n    startDing = () => {\r\n        const {count, beatsPerMeasure} = this.state;\r\n\r\n        // Checks to see which ding we are on and plays the correct one.\r\n        if (count % beatsPerMeasure === 0) {\r\n            this.ding1.play();\r\n        }\r\n        else {\r\n            this.ding2.play();\r\n        }\r\n\r\n        // Update beat.\r\n        this.setState(state => ({count: (state.count + 1) % state.beatsPerMeasure}));\r\n    }\r\n\r\n    // Sets the parameters for the slider and metronome buttons\r\n    render() {\r\n        const {playing, bpm} = this.state;\r\n\r\n        return (\r\n            <div className=\"metronome\">\r\n                <div className=\"bpm-slider\">\r\n                    <div> {bpm} BPM </div>\r\n                    <input \r\n                    type = \"range\" \r\n                    min = \"60\" \r\n                    max = \"240\" \r\n                    value = {bpm} \r\n                    onChange = {this.BpmChange} />\r\n                </div>\r\n                <button onClick = {this.startStop}> \r\n                {playing ? 'Stop' : 'Start'} \r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Metronome;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Metronome from './Metronome';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Metronome />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}